// Code generated by github.com/arsmn/fastgql, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

type Base interface {
	IsBase()
}

type CreatePostInput struct {
	Title string  `json:"title"`
	Body  *string `json:"body"`
}

type CreateTodoInput struct {
	Name      string `json:"name"`
	Completed *bool  `json:"completed"`
}

type CreateUserInput struct {
	Email    *string `json:"email"`
	Phone    *string `json:"phone"`
	Password *string `json:"password"`
}

type Post struct {
	ID        uuid.UUID       `json:"id" gorm:"type:uuid;primaryKey;default:uuid_generate_v4()"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	DeletedAt *gorm.DeletedAt `json:"deletedAt" gorm:"index"`
	Title     string          `json:"title"`
	Body      *string         `json:"body"`
}

func (Post) IsBase() {}

type Todo struct {
	ID        uuid.UUID       `json:"id" gorm:"type:uuid;primaryKey;default:uuid_generate_v4()"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	DeletedAt *gorm.DeletedAt `json:"deletedAt" gorm:"index"`
	Name      string          `json:"name" gorm:"index"`
	Completed *bool           `json:"completed" gorm:"default:false"`
	Status    Status          `json:"status"`
}

func (Todo) IsBase() {}

type UpdateUserInput struct {
	ID       uuid.UUID `json:"id" gorm:"type:uuid;primaryKey;default:uuid_generate_v4()"`
	Email    *string   `json:"email"`
	Phone    *string   `json:"phone"`
	Password *string   `json:"password"`
}

type User struct {
	ID        uuid.UUID       `json:"id" gorm:"type:uuid;primaryKey;default:uuid_generate_v4()"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	DeletedAt *gorm.DeletedAt `json:"deletedAt" gorm:"index"`
	Email     *string         `json:"email"`
	Phone     *string         `json:"phone"`
	Password  *string         `json:"password"`
	Token     *string         `json:"token"`
}

func (User) IsBase() {}

type Status string

const (
	StatusActive      Status = "Active"
	StatusDeactivated Status = "Deactivated"
	StatusBlocked     Status = "Blocked"
	StatusDraft       Status = "Draft"
	StatusPending     Status = "Pending"
	StatusClosed      Status = "Closed"
)

var AllStatus = []Status{
	StatusActive,
	StatusDeactivated,
	StatusBlocked,
	StatusDraft,
	StatusPending,
	StatusClosed,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusDeactivated, StatusBlocked, StatusDraft, StatusPending, StatusClosed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
